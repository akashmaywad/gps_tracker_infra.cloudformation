AWSTemplateFormatVersion: "2010-09-09"

Description: A stack for deploying containerized applications onto a cluster of EC2 hosts using Elastic Container Service. This stack runs containers on hosts that are in a public VPC subnet, and includes a public facing load balancer to register the services in.

Parameters:
  VPCId:
    Description: The name of the VPC being created.
    Type: String
    Default: VPC Public and Private with NAT

  PublicSubnetOne:
    Description: The name of the VPC being created.
    Type: String
    Default: VPC Public and Private with NAT

  PublicSubnetTwo:
    Description: The name of the VPC being created.
    Type: String
    Default: VPC Public and Private with NAT

  DesiredCapacity:
    Description: Number of EC2 instances to launch in your ECS cluster.
    Type: Number
    Default: "0"

  MaxSize:
    Description: Maximum number of EC2 instances that can be launched in your ECS cluster.
    Type: Number
    Default: "1"

  InstanceType:
    Description: EC2 instance type
    Type: String
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
    Default: t2.micro
    ConstraintDescription: Please choose a valid instance type.

Resources:
  PublicECSSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        # Allow access to ALB from anywhere on the internet
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1

  # ECS Resources
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      "ClusterName": !Sub ${AWS::StackName}-ECS-Cluster

  # A security group for the EC2 hosts that will run the containers.
  # Two rules, allowing network traffic from a public facing load
  # balancer and from other hosts in the security group.
  #
  # Remove any of the following ingress rules that are not needed.
  # If you want to make direct requests to a container using its
  # public IP address you'll need to add a security group rule
  # to allow traffic from all IP addresses.
  EcsHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the ECS hosts that run containers
      VpcId: !Ref VPCId

  EcsSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other hosts in the same security group
      GroupId: !Ref EcsHostSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref EcsHostSecurityGroup

  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: service-autoscaling
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - application-autoscaling:*
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:PutMetricAlarm
                  - ecs:DescribeServices
                  - ecs:UpdateService
                Resource: '*'

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EC2ExecutionRole

  # Role for the EC2 hosts. This allows the ECS agent on the EC2 hosts
  # to communciate with the ECS control plane, as well as download the docker
  # images from ECR to run on your host.
  EC2ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ecs:CreateCluster
                  - ecs:DeregisterContainerInstance
                  - ecs:DiscoverPollEndpoint
                  - ecs:Poll
                  - ecs:RegisterContainerInstance
                  - ecs:StartTelemetrySession
                  - ecs:Submit*
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
                  - ecr:BatchGetImage
                  - ecr:GetDownloadUrlForLayer
                Resource: '*'

  # Autoscaling group. This launches the actual EC2 instances that will register
  # themselves as members of the cluster, and run the docker containers.
  ECSAutoScalingGroup:
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplateSpecification
      MinSize: "0"
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity

  LaunchTemplateSpecification:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt
            - EC2InstanceProfile
            - Arn
        DisableApiTermination: true
        ImageId: ami-0be80e037af26a4ec
        InstanceType: t2.micro
        KeyName: Test_Key_Pair
        SecurityGroupIds:
          - !GetAtt EcsHostSecurityGroup.GroupId

Outputs:
  ClusterName:
    Description: The name of the ECS cluster
    Value: !Ref ECSCluster
    Export:
      Name: !Join
        - ':'
        - - !Ref AWS::StackName
          - ClusterName

  EcsHostSecurityGroup:
    Description: A security group used to allow containers to receive traffic
    Value: !Ref EcsHostSecurityGroup
    Export:
      Name: !Join
        - ':'
        - - !Ref AWS::StackName
          - EcsHostSecurityGroup
